time: 2024/11/11

/*
   只编译不链接，生成目标文件".o"      -c
   使用nm命令查看二进制文件
*/

/*
   //c与c++的混合编程
   extern "C"  ----按照C语言的方式进行编译，也就是不进行名字改编
*/

/*
    #ifdef __cplusplus
    ...
    #endif
    //属于c++的一个宏,如果定义了__cplusplus,则执行其内部的代码，否则跳过
*/

/*
   默认参数需要从右向左进行连续的赋初值
   int add(int x = 0, int y, int z) //error
   int add(int x, int y, int z = 0) //ok
*/

学习到CppBaseDay06_3

time: 2024/11/12

/*
   问题回顾
   强制转换: static_cast, const_cast
   函数重载
   混合编程
   默认参数
*/

/*
   内联函数:减少开销，提高程序的效率
*/
学习到CppBaseDay06_4

time: 2024/11/17
/*
   编码习惯
   写成if(0 == y)是为了防止出现if(y = 0)这种情况
*/

/*
   sizeof测试指针的时候，不能将指针所指的内容长度计算出来，只能计算指针的大小
   对于32位系统而言，一个指针占4个字节
   对于64位系统而言，一个指针占8个字节
   所以之后测试字符数组的时候，我们就用sizeof
   测试字符指针的时候，我们就用strlen
*/

/*
   gdb调试基本操作：
   l 显示代码，默认显示10行
   r 运行
   b+行号 打断点
   n 单步调试，跳过函数，不进入函数内部
   s 单步调试，不跳过函数，会进入函数内部
   finish 跳出当前函数，返回函数调用点
   c(continue) 运行到下一个断点
   info b 查看断点信息
   q 退出gdb
   bt(backtrace) 查看函数调用的调用栈帧和层级关系
*/

学习到CppBaseDay06_5

time: 2024/12/2

/*
   c语言字符数组以'\0'结尾
*/

/*
   c++风格字符串转换为c风格字符串
   const char* pstr = s.c_str();
*/
学习到CppBaseDay07_1
